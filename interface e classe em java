// Interface para validação
public interface Validador {
    boolean validar(String valor);
}

// Classe abstrata para validação de dados
public abstract class ValidadorBase implements Validador {
    public abstract boolean validar(String valor);
}

// Implementação da interface e classe abstrata
public class ValidadorCpf extends ValidadorBase {
    @Override
    public boolean validar(String cpf) {
        return cpf != null && cpf.matches("\\d{3}\\.\\d{3}\\.\\d{3}-\\d{2}");
    }
}

public class ValidadorNome extends ValidadorBase {
    @Override
    public boolean validar(String nome) {
        return nome != null && nome.matches("^[a-zA-Z\\s]+$");
    }
}

public class ValidadorData extends ValidadorBase {
    private boolean isFuturo;

    public ValidadorData(boolean isFuturo) {
        this.isFuturo = isFuturo;
    }

    @Override
    public boolean validar(String data) {
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        try {
            Date date = sdf.parse(data);
            Date now = new Date();
            return isFuturo ? date.after(now) : date.before(now);
        } catch (ParseException e) {
            return false;
        }
    }
}
